<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GET请求和POST请求的区别</title>
    <link href="/2021/07/06/GET%E8%AF%B7%E6%B1%82%E5%92%8CPOST%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2021/07/06/GET%E8%AF%B7%E6%B1%82%E5%92%8CPOST%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1><span id="get请求和post请求的区别">GET请求和POST请求的区别</span></h1><ul><li>从<strong>缓存</strong>的角度，GET 请求会被浏览器主动缓存下来，留下历史记录，而 POST 默认不会。</li><li>从<strong>编码</strong>的角度，GET 只能进行 URL 编码，只能接收 ASCII 字符，而 POST 没有限制。</li><li>从<strong>参数</strong>的角度，GET 一般放在 URL 中，因此不安全，POST 放在请求体中，更适合传输敏感信息。（其实安全性差不多）</li><li>从<strong>幂等性</strong>的角度，<code>GET</code>是<strong>幂等</strong>的，而<code>POST</code>不是。(<code>幂等</code>表示执行相同的操作，结果也是相同的)</li><li>从<strong>TCP</strong>的角度，GET 请求会把请求报文一次性发出去，而 POST 会分为两个 TCP 数据包，首先发 header 部分，如果服务器响应 100(continue)， 然后发 body 部分。(<strong>火狐</strong>浏览器除外，它的 POST 请求只发一个 TCP 包)</li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机网络基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>http</tag>
      
      <tag>http请求</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP方法</title>
    <link href="/2021/07/06/HTTP%E6%96%B9%E6%B3%95/"/>
    <url>/2021/07/06/HTTP%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1><span id="http方法">HTTP方法</span></h1><ul><li><p><strong>GET请求：</strong>GET 方法用来请求访问已被URI识别的资源，指定的资源经服务器端解析后返回响应内容。</p><p>Web上可用的每种资源 -<a href="https://baike.baidu.com/item/HTML">HTML</a>文档、图像、视频片段、程序等 - 由一个通用资源标识符（Uniform Resource Identifier, 简称”URI”）进行定位。</p></li><li><p><strong>POST请求：</strong>传输实体主体</p><p>虽然用 GET 方法也可以传输实体的主体，但一般不用 GET 方法进行传输，而是用 POST 方法。虽说 POST 的功能与 GET 很相似，但 POST 的主要目的并不是获取响应的主体内容。</p><p>服务器相应内容为post请求的处理结果</p></li><li><p><strong>PUT请求：</strong>从客户端向服务器传送的数据取代指定的文档的内容。</p><p>服务器响应内容为请求的处理结果</p><p>但是，鉴于 HTTP/1.1 的 PUT 方法自身不带验证机制，任何人都可以 上传文件 , 存在安全性问题，因此一般的 Web 网站不使用该方法。</p></li><li><p><strong>HEAD请求：</strong>类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头</p><p>用于确认 URI 的有效性及资源更新的日期时间等。</p></li><li><p><strong>DELETE请求：</strong>删除文件</p><p>DELETE 方法用来删除文件，是与 PUT 相反的方法。DELETE 方法按请求 URI 删除指定的资源。</p><p>相应内容为请求的处理结果</p><p>但是，HTTP/1.1 的 DELETE 方法本身和 PUT 方法一样不带验证机 制，所以一般的 Web 网站也不使用 DELETE 方法。</p></li><li><p><strong>OPTIONS请求：</strong>询问支持的方法 OPTIONS 方法用来查询针对请求 URI 指定的资源支持的方法。</p></li><li><p><strong>TRACE请求：</strong>TRACE 方法是让 Web 服务器端将之前的请求通信环回给客户端的方法。</p><p>客户端通过 TRACE 方法可以查询发送出去的请求是怎样被加工修改 / 篡改的。</p><p>主要用于测试和诊断</p></li><li><p><strong>CONNECT请求：</strong>建立连接隧道，用于代理服务器</p><p>CONNECT 方法要求在与代理服务器通信时建立隧道，实现用隧道协议进行 TCP 通信。主要使用 SSL（Secure Sockets Layer，安全套接 层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容 加 密后经网络隧道传输。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机网络基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>http</tag>
      
      <tag>请求方法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>三次握手四次挥手机制及原因</title>
    <link href="/2021/07/06/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%8E%9F%E5%9B%A0/"/>
    <url>/2021/07/06/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%8E%9F%E5%9B%A0/</url>
    
    <content type="html"><![CDATA[<h1><span id="三次握手四次挥手机制及原因">三次握手四次挥手机制及原因</span></h1><h2><span id="三次握手">三次握手</span></h2><h3><span id="一些基本概念"><strong>一些基本概念</strong></span></h3><p>传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于<strong>字节流</strong>的传输层通信协议</p><p>面向连接：网络系统需要在两台计算机之间发送数据之前先建立连接的一种特性。面向连接网络类似于电话系统，在开始通信前必须先进行一次呼叫和应答。</p><p>所谓的<strong>字节流服务</strong>（Byte Stream Service）是指，为了方便传输，将大块数据分割成以<strong>报文段（segment）为单位的数据包</strong>进行管理。</p><p><strong>报文：</strong>网络中交换与传输的数据单元，即站点一次性要发送的数据块。如果需要邮寄一个产品，报文指的就是你的产品本身，邮件信息（发送人，接收人，发送地，目的地等）</p><p><strong>TCP报文</strong></p><p><img src="/2021/07/06/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%8E%9F%E5%9B%A0/../public/img/aHR0cHM6Ly9rbm93bGVkZ2UtcGljdHVyZXMub3NzLWNuLWJlaWppbmcuYWxpeXVuY3MuY29tLyVFNyVCRCU5MSVFNyVCQiU5QyVFNyU5QiVCOCVFNSU4NSVCMyVFNyU5RiVBNSVFOCVBRiU4Ni90Y3AlRTYlOEElQTUlRTYlOTYlODcucG5n" alt="tcp%E6%8A%A5%E6%96%87.png"></p><p>上图中有几个字段需要重点介绍下：<br>（1）序号：Seq序号，占32位，用来标识从TCP源端向目的端发送的字节流，发起方发送数据时对此进行标记。<br>（2）确认序号：Ack序号，占32位，只有ACK标志位为1时，确认序号字段才有效，Ack=Seq+1。<br>（3）标志位：共6个，即URG、ACK、PSH、RST、SYN、FIN等，具体含义如下：<br>（A）URG：紧急指针（urgent pointer）有效。<br>（B）ACK：确认序号有效。<br>（C）PSH：接收方应该尽快将这个报文交给应用层。<br>（D）RST：重置连接。<br>（E）SYN：发起一个新连接。<br>（F）FIN：释放一个连接。</p><p><strong>数据包（packet）：</strong>数据包是网络层传输的数据单元。也称为IP包，包中带有足够寻址信息(IP地址)，可独立地从源主机传输到目的主机。在报文数据较大时候，就像产品需要分成几个产品箱装，每个产品箱上面都还是有邮寄的信息。</p><p><strong>数据段：</strong>数据段是传输层的信息单元。比如“目的IP地址”、“源IP地址”、“净载数据”等</p><p><strong>例子：</strong>邮寄产品时，需要传输的数据是产品，数据包就是产品箱，而帧就是用来装产品箱的纸箱</p><p>在路由器遇到大数据流量的情况下，可能在没有提示的情况下丢失数据包，而可靠的传输服务是指，能够把数据准确可靠地传给对方。一言以蔽之， TCP 协议为了更容易传送大数据会把数据分割成小数据包，每个小数据包由不同途径传输到目标机器，当到达目标机器时，数据会重新拼装在一起。</p><p>TCP 协议能够确认数据最终是否送达到对方。 确保数据能到达目标为了准确无误地将数据送达目标处，TCP 协议采用了三次握手 （three-way handshaking）策略。</p><p>TCP三次握手机制需要用到的标志位是 SYN（请求连接）和ACK（确认有效），一般使用时设置为1</p><h3><span id="详细过程"><strong>详细过程</strong></span></h3><p><img src="/2021/07/06/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%8E%9F%E5%9B%A0/../public/img/image-20210602140654771.png" alt="image-20210602140654771"></p><p>刚开始客户端处于 Closed 的状态，服务端处于 Listen 状态</p><p><strong>第一次握手:</strong><br>第一次握手：建立连接时，客户端发送<a href="https://baike.baidu.com/item/syn">syn</a>包（seq=x）到服务器，并进入<a href="https://baike.baidu.com/item/SYN_SENT">SYN_SENT</a>状态，等待服务器确认；</p><p>SYN：同步序列编号（Synchronize Sequence Numbers）。</p><p><img src="/2021/07/06/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%8E%9F%E5%9B%A0/../public/img/v2-5bfd5774a386f4a46c4a0c2f3d7a72cd_1440w.jpg" alt="img"></p><p><strong>第二次握手:</strong><br>服务器发回确认包(ACK)应答。即SYN标志位和ACK标志位均为1同时，将确认序号(Acknowledgement Number)X+1返回给客户端，同时自己发送一个SYN包序号为Y，服务器进入SYN_RECV状态。</p><p><img src="/2021/07/06/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%8E%9F%E5%9B%A0/../public/img/v2-0b5c1fc7f3fad995376cdc67c1c855b5_1440w.jpg" alt="img"></p><p><strong>第三次握手：</strong><br>客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK且确认序号为Y+1。发送完毕后客户端和服务器进入ESTABLIISH状态完成三次握手。</p><p><img src="/2021/07/06/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%8E%9F%E5%9B%A0/../public/img/v2-615fd819c5c05386542dabdabb4b1d14_1440w.jpg" alt="img"></p><h3><span id="需要知道的知识点">需要知道的知识点</span></h3><ul><li><p>需要文段不能携带数据，但要消耗掉一个序号。如果带数据的话会让服务器更加容易受到攻击。比如不断重复报文信息就会让服务器花很多时间来处理这个报文。</p></li><li><p>初始序列号不是固定的，当一端为建立连接而发送它的SYN时，它为连接选择一个初始序号。ISN随时间而变化，因此每个连接都将具有不同的ISN。如果 ISN 是固定的，攻击者很容易猜出后续的确认号，因此 ISN 是动态生成的。</p></li><li><p>半队列连接：服务器第一次收到客户端的 SYN 之后，就会处于 SYN_RCVD 状态，此时双方还没有完全建立其连接，服务器会把此种状态下请求连接放在一个队列里，我们把这种队列称之为半连接队列。</p></li><li><p>当然还有一个全连接队列，就是已经完成三次握手，建立起连接的就会放在全连接队列中。如果队列满了就有可能会出现丢包现象。</p></li><li><p>SYN-ACK 重传次数的问题：　服务器发送完SYN－ACK包，如果未收到客户确认包，服务器进行首次重传，等待一段时间仍未收到客户确认包，进行第二次重传，如果重传次数超 过系统规定的最大重传次数，系统将该连接信息从半连接队列中删除。注意，每次重传等待的时间不一定相同，一般会是指数增长，例如间隔时间为 1s, 2s, 4s, 8s, …</p></li><li><p>syn攻击：<strong>服务器端的资源分配是在二次握手时分配的，而客户端的资源是在完成三次握手时分配的</strong>，所以服务器容易受到SYN洪泛攻击。SYN攻击就是Client在短时间内伪造大量不存在的IP地址，并向Server不断地发送SYN包，Server则回复确认包，并等待Client确认，由于源地址不存在，因此Server需要不断重发直至超时，这些伪造的SYN包将长时间占用未连接队列，导致正常的SYN请求因为队列满而被丢弃，从而引起网络拥塞甚至系统瘫痪。SYN 攻击是一种典型的 DoS/DDoS 攻击。</p><p>当你在服务器上看到大量的半连接状态时，特别是源IP地址是随机的，基本上可以断定这是一次SYN攻击</p></li></ul><p><strong>如果建立连接后，客户端出现故障怎么办？</strong></p><p>TCP还设有一个保活计时器，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75秒钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</p><h3><span id="为什么三次握手比较合适">为什么三次握手比较合适：</span></h3><p>比如 </p><ul><li>听得见？（客户端发送一个SYN标记的包，Seq初始序列号x，发送完成后  客户端  进入<code>SYN_SEND</code>状态。）</li><li>听得见，你呢？（服务器返回确认包(ACK)应答，同时还要发送一个SYN包回去。ACK = x + 1,表示确认收到(客户端发来的Seq值 + 1)，Seq = y, 表示让客户端确认是否能收到。发送完成后  服务端  进入<code>SYN_RCVD</code>状态。）</li><li>听得见。（客户端再次发送确认包(ACK),ACK = y + 1, 表示确认收到服务器的包（服务端发来的Seq值 + 1）。客户端发送完毕后，进入ESTABLISHED状态，服务端接收到这个包，也进入<code>ESTABLISHED</code>状态, TCP握手结束。）</li></ul><p><img src="/2021/07/06/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%8E%9F%E5%9B%A0/../public/img/9658881-14388ff91eda35c6.png" alt="img"></p><h2><span id="四次挥手">四次挥手</span></h2><p>建立一个连接需要三次握手，而终止一个连接要经过四次挥手（也有将四次挥手叫做四次握手的）。这由TCP的<strong>半关闭</strong>（half-close）造成的。所谓的半关闭，其实就是TCP提供了连接的一端在结束它的发送后还能接收来自另一端数据的能力。</p><p>TCP 的连接的拆除需要发送四个包，因此称为四次挥手(Four-way handshake)，客户端或服务器均可主动发起挥手动作。</p><h3><span id="详细过程">详细过程</span></h3><p><img src="/2021/07/06/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%8E%9F%E5%9B%A0/../public/img/image-20210706112433971.png" alt="image-20210706112433971"></p><h4><span id="一次挥手"><strong>一次挥手</strong></span></h4><ul><li>客户端打算关闭连接，此时会发送一个 TCP 首部 <code>FIN</code> 标志位被置为 <code>1</code> 的报文，也即 <code>FIN</code> 报文，之后客户端进入 <code>FIN_WAIT_1</code> 状态。</li></ul><h4><span id="二次挥手"><strong>二次挥手</strong></span></h4><ul><li>服务端收到该报文后，就向客户端发送 <code>ACK</code> 应答报文，接着服务端进入 <code>CLOSED_WAIT</code> 状态。</li></ul><h4><span id="三次挥手"><strong>三次挥手</strong></span></h4><ul><li>客户端收到服务端的 <code>ACK</code> 应答报文后，之后进入 <code>FIN_WAIT_2</code> 状态。等待服务端处理完数据后，也向客户端发送 <code>FIN</code> 报文，之后服务端进入 <code>LAST_ACK</code> 状态。</li></ul><h4><span id="四次挥手"><strong>四次挥手</strong></span></h4><ul><li>客户端收到服务端的 <code>FIN</code> 报文后，回一个 <code>ACK</code> 应答报文，之后进入 <code>TIME_WAIT</code> 状态</li><li>服务器收到了 <code>ACK</code> 应答报文后，就进入了 <code>CLOSED</code> 状态，至此服务端已经完成连接的关闭。</li><li>客户端在经过 <code>2MSL</code> 一段时间后，自动进入 <code>CLOSED</code> 状态，至此客户端也完成连接的关闭。</li></ul><p>你可以看到，每个方向都需要<strong>一个 FIN 和一个 ACK</strong>，因此通常被称为<strong>四次挥手</strong>。</p><p><img src="/2021/07/06/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%8E%9F%E5%9B%A0/../public/img/290fd6de63004c7396029b6d861bfe39~tplv-k3u1fbpfcp-zoom-1.image" alt="四次挥手动态图示"></p><h3><span id="为什么需要四次挥手">为什么需要四次挥手</span></h3><ul><li>关闭连接时，客户端向服务端发送 <code>FIN</code> 时，仅仅表示客户端不再发送数据了但是还能接收数据。</li><li>服务器收到客户端的 <code>FIN</code> 报文时，先回一个 <code>ACK</code> 应答报文，而服务端可能还有数据需要处理和发送，等服务端不再发送数据时，才发送 <code>FIN</code> 报文给客户端来表示同意现在关闭连接。</li></ul><h3><span id="为什么客户端在time-wait阶段要等2msl"><strong>为什么客户端在TIME-WAIT阶段要等2MSL？</strong></span></h3><p>为的是确认服务器端是否收到客户端发出的 ACK 确认报文，当客户端发出最后的 ACK 确认报文时，并不能确定服务器端能够收到该段报文。</p><p>所以客户端在发送完 ACK 确认报文之后，会设置一个时长为 2MSL 的计时器。</p><p>MSL 指的是 Maximum Segment Lifetime：一段 TCP 报文在传输过程中的最大生命周期。</p><p>2MSL 即是服务器端发出为 FIN 报文和客户端发出的 ACK 确认报文所能保持有效的最大时长。</p><p>服务器端在 1MSL 内没有收到客户端发出的 ACK 确认报文，就会再次向客户端发出 FIN 报文：</p><ul><li>如果客户端在 2MSL 内，再次收到了来自服务器端的 FIN 报文，说明服务器端由于各种原因没有接收到客户端发出的 ACK 确认报文。</li></ul><p>客户端再次向服务器端发出 ACK 确认报文，计时器重置，重新开始 2MSL 的计时。</p><ul><li>否则客户端在 2MSL 内没有再次收到来自服务器端的 FIN 报文，说明服务器端正常接收了 ACK 确认报文，客户端可以进入 CLOSED  阶段，完成“四次挥手”。</li></ul><p>所以，客户端要经历时长为 2SML 的 TIME-WAIT 阶段;这也是为什么客户端比服务器端晚进入 CLOSED 阶段的原因。</p><p>参考链接：<a href="https://juejin.cn/post/6965544021833809928">https://juejin.cn/post/6965544021833809928</a></p>]]></content>
    
    
    <categories>
      
      <category>计算机网络基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>http</tag>
      
      <tag>三次握手</tag>
      
      <tag>四次挥手</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>location对象</title>
    <link href="/2021/07/06/location%E5%AF%B9%E8%B1%A1/"/>
    <url>/2021/07/06/location%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h1><span id="location对象">location对象</span></h1><p>Location对象包含有关当前URL的信息.它是一个比较特别的对象,因为它既是Window对象的一部分,可通过<code>window.location</code>属性来访问.也是document对象的属性,通过<code>document.location</code>来使用.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.location === <span class="hljs-built_in">document</span>.location) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>在<a href="https://developer.mozilla.org/en-US/docs/Web/API/Location">MDN</a>中提到,<code>Location</code> 其实是一个接口,表示链接到的对象的URL.<code>Document</code> 和 <code>Window</code> 接口都有这样一个链接的Location.所以我们可以通过<code>document.location</code> 或 <code>window.location</code> 来访问 <code>Location</code> 对象.甚至于<code>location</code> 都是一个全局变量.我们直接在控制台键入 <code>location</code> 也会返回一个 <code>Location</code> 对象</p><h2><span id="对象属性">对象属性</span></h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>hash</td><td>锚点部分,以<code>#</code>开头</td></tr><tr><td>host</td><td>主机名 + 端口号</td></tr><tr><td>hostname</td><td>主机名 如<code>127.0.0.1</code> <code>localhost</code> 等</td></tr><tr><td>href</td><td>包含完整URL</td></tr><tr><td>origin</td><td>协议 + 主机名 + 端口号(我们常说的跨域,跨的就是它)</td></tr><tr><td>pathname</td><td>路径部分,以 <code>/</code> 开头</td></tr><tr><td>port</td><td>端口,常见的<code>80</code> <code>443</code>等</td></tr><tr><td>protocol</td><td>URL对应的协议,注意最后是有一个<code>:</code>的,如<code>http:</code> <code>https:</code> 等</td></tr><tr><td>search</td><td>参数部分,以<code>?</code> 开头</td></tr></tbody></table><p>其中上面的属性,<strong>除了</strong> <code>origin</code> 是个只读属性不可修改外,其余的属性都是读写兼备的. 下面是属性如何获取和设置的用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.location.hash)  <span class="hljs-comment">// 读取当前页面的hash 结果为 #test</span><br><span class="hljs-built_in">window</span>.location.hash = <span class="hljs-string">&#x27;test2&#x27;</span> <span class="hljs-comment">// 设置当前页面的hash 此时可以观察到浏览器的url会变化</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.location.hash) <span class="hljs-comment">// 再次读取hash,结果变成了 #test2</span><br><span class="hljs-built_in">window</span>.location.href = <span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span>  <span class="hljs-comment">// 页面直接跳转到百度</span><br></code></pre></td></tr></table></figure><p>在这里顺便提一下,现在大部分的浏览器都支持 <code>hashchange</code> 事件.就是当浏览器<code>#</code> 后面的内容变化时,触发此事件</p><p><strong>注意点：</strong></p><ul><li>每次修改<code>location</code> 的属性(<code>hash</code>除外),页面都会以新URL重新加载.</li><li>location.origin<code> 这个属性在IE10及其以下是不存在的,会返回</code>undefined</li></ul><h2><span id="对象方法">对象方法</span></h2><p> <code>Location</code> 对象有3个方法 (<code>toString</code>方法就不说了,就是返回一个包含完整url的字符串)</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>assign</td><td>加载新页面</td></tr><tr><td>reload</td><td>重加载当前页面</td></tr><tr><td>replace</td><td>用一个新页面代替当前页面</td></tr></tbody></table><h3><span id="reload方法"><code>reload</code>方法</span></h3><p>参数是一个可选的布尔类型,不填默认为<code>false</code>,表示可能从缓存中读取当前页面刷新,相当于普通的F5刷新,<code>true</code>表示强制浏览器从服务器去重新获取页面资源,相当于强制刷新(<code>Shift</code>+<code>F5</code> 或者 <code>Cmd</code>+<code>Shift</code>+<code>R</code>)</p><h3><span id="assign方法"><code>assign</code>方法</span></h3><p>使用了 <code>assign</code> 后,会在浏览器的历史记录中留下之前老页面的地址,当我们在新页面点击回退键的时候还可以回到之前的页面</p><h3><span id="replace方法"><code>replace</code>方法</span></h3><p><code>eplace</code> 则是使用新页面的地址替换老页面的地址,此时再点击回退按钮就回不到我们之前的页面去了.</p><h2><span id="补充">补充</span></h2><h3><span id="meta实现刷新和跳转">meta实现刷新和跳转</span></h3><p>其实当我们想要实现页面的跳转或者每隔一段时间刷新当前页面,不一定非得使用定时器+location方法.我们还可以使用meta属性来达到相同的效果.假如我这是一个监控页面,想要每隔20秒刷新一次页面.使用定时器的方法代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">window</span>.location.reload()<br>&#125;,<span class="hljs-number">20000</span>)<br></code></pre></td></tr></table></figure><p>而使用meta标签则只需要</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;refresh&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;20&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>又假如这是一个简单的介绍页,在10s后差不多就要自动跳到其他页面.我们也可以使用上面的meta属性.只需要在<code>content</code>里面时间的后面加上跳转的地址就可以了,等时间到了它就会自动跳转.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;refresh&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;10;https://www.baidu.com&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>当然使用meta有一个不好的地方就是它的刷新和跳转是不可中途取消的.因此它的使用场景要视具体的业务而定.比如一个需要权限的页面被非法访问,那么就可以控制一定时间后自动跳到其他页面去.</p><h3><span id="urlsearchparams接口查询字符串">URLSearchParams接口查询字符串</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> urlParams = <span class="hljs-keyword">new</span> URLSearchParams(<span class="hljs-built_in">window</span>.location.search)<br><span class="hljs-built_in">console</span>.log(urlParams.get(<span class="hljs-string">&#x27;id&#x27;</span>))  <span class="hljs-comment">// 123</span><br></code></pre></td></tr></table></figure><p><code>URLSearchParams</code> 接口定义了一些实用的方法来处理URL中的查询字符串.</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BOM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构学习-集合</title>
    <link href="/2021/07/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0-%E9%9B%86%E5%90%88/"/>
    <url>/2021/07/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0-%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1><span id="数据结构学习-集合">数据结构学习-集合</span></h1><h2><span id="概念">概念</span></h2><p>集合是由一组无序且唯一（即不能重复）的项组成的。该数据结构使用了与有限集合相同的数学概念，但应用在计算机科学的数据结构中。</p><p>你也可以把集合想象成一个既没有重复元素，也没有顺序概念的数组。 在数学中，集合也有并集、交集、差集等基本运算。</p><h2><span id="创建集合的类">创建集合的类</span></h2><p>有一个非常重要的细节是，我们使用对象而不是数组来表示集合（items）。不过，也可以 用数组实现。此处用对象来实现，JavaScript 的对象不允许一个键指向两个不同的属性，也保证了集合里的元素都是唯一的。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
      <tag>集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>比较版本号</title>
    <link href="/2021/07/06/%E6%AF%94%E8%BE%83%E7%89%88%E6%9C%AC%E5%8F%B7/"/>
    <url>/2021/07/06/%E6%AF%94%E8%BE%83%E7%89%88%E6%9C%AC%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<h1><span id="165比较版本号">（165）比较版本号</span></h1><h2><span id="题目描述">题目描述</span></h2><p>给你两个版本号 version1 和 version2 ，请你比较它们。</p><p>版本号由一个或多个修订号组成，各修订号由一个 ‘.’ 连接。每个修订号由 多位数字 组成，可能包含 前导零 。每个版本号至少包含一个字符。修订号从左到右编号，下标从 0 开始，最左边的修订号下标为 0 ，下一个修订号下标为 1 ，以此类推。例如，2.5.33 和 0.1 都是有效的版本号。</p><p>比较版本号时，请按从左到右的顺序依次比较它们的修订号。比较修订号时，只需比较 忽略任何前导零后的整数值 。也就是说，修订号 1 和修订号 001 相等 。如果版本号没有指定某个下标处的修订号，则该修订号视为 0 。例如，版本 1.0 小于版本 1.1 ，因为它们下标为 0 的修订号相同，而下标为 1 的修订号分别为 0 和 1 ，0 &lt; 1 。</p><p>返回规则如下：</p><p>如果 version1 &gt; version2 返回 1，<br>如果 version1 &lt; version2 返回 -1，<br>除此之外返回 0。</p><h2><span id="解题">解题</span></h2><h3><span id="思路">思路</span></h3><p>通过点 把字符串分割成数组，然后利用 JS 是动态语言直接相减比较大小。js 中 001 - 01 = 0</p><h3><span id="方法一利用js-动态性">方法一：利用JS 动态性</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compareVersion</span>(<span class="hljs-params">version1, version2</span>) </span>&#123;<br>      <span class="hljs-keyword">let</span> v1 = version1.split(<span class="hljs-string">&#x27;.&#x27;</span>)<br>      <span class="hljs-keyword">let</span> v2 = version2.split(<span class="hljs-string">&#x27;.&#x27;</span>)<br>      <span class="hljs-keyword">var</span> lMax = <span class="hljs-built_in">Math</span>.max(v1.length, v2.length)<br>      <span class="hljs-keyword">let</span> p = <span class="hljs-number">0</span><br>      <span class="hljs-keyword">while</span> (p &lt; lMax) &#123;<br>        v1[p] = p &gt;= v1.length ? <span class="hljs-number">0</span> : v1[p]<br>        v2[p] = p &gt;= v2.length ? <span class="hljs-number">0</span> : v2[p]<br>        <span class="hljs-keyword">if</span> (v1[p] - v2[p] &gt; <span class="hljs-number">0</span>) &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (v1[p] - v2[p] &lt; <span class="hljs-number">0</span>) &#123;<br>          <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">if</span> (p == lMax - <span class="hljs-number">1</span> &amp;&amp; v1[p] - v2[p] == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        &#125;<br>        p++<br>      &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>无重复字符的最长子串</title>
    <link href="/2021/07/06/%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
    <url>/2021/07/06/%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h1><span id="3无重复字符的最长子串">（3）无重复字符的最长子串</span></h1><h2><span id="题目描述">题目描述</span></h2><p>给定一个字符串，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><h2><span id="解题">解题</span></h2><h3><span id="方法一双指针通过哈希表判断是否有重复">方法一：双指针，通过哈希表判断是否有重复</span></h3><p>在上面的流程中，我们还需要使用一种数据结构来判断 是否有重复的字符，常用的数据结构为哈希集合（即 C++ 中的 std::unordered_set，Java 中的 HashSet，Python 中的 set, JavaScript 中的 Set）。在左指针向右移动的时候，我们从哈希集合中移除一个字符，在右指针向右移动的时候，我们往哈希集合中添加一个字符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> s = <span class="hljs-string">&#x27;abcad&#x27;</span><br>     <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">lengthOfLongestSubstring</span>(<span class="hljs-params">str</span>) </span>&#123;<br>       <span class="hljs-keyword">let</span> l = <span class="hljs-number">0</span><br>       <span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>()<br>       <span class="hljs-keyword">let</span> ans = <span class="hljs-number">0</span><br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; str.length; i++) &#123;<br>         <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>) &#123;<br>           set.delete(str.charAt(i - <span class="hljs-number">1</span>))<br>         &#125;<br>         <span class="hljs-keyword">while</span> (l &lt; str.length &amp;&amp; !set.has(str.charAt(l))) &#123;<br>           set.add(str.charAt(l))<br>           l++<br>         &#125;<br>         ans = <span class="hljs-built_in">Math</span>.max(ans, l - i)<br>       &#125;<br>       <span class="hljs-keyword">return</span> ans<br>     &#125;<br></code></pre></td></tr></table></figure><h4><span id="复杂度分析">复杂度分析</span></h4><ul><li>时间复杂度：O(N)，其中 N 是字符串的长度。左指针和右指针分别会遍历整个字符串一次。</li><li>空间复杂度：O(∣Σ∣)，其中 \SigmaΣ 表示字符集（即字符串中可以出现的字符），∣Σ∣ 表示字符集的大小。</li></ul><h4><span id="反思">反思</span></h4><p>只要涉及到去重之类的，我们都可以用哈希表来记录数据再进行比较</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>排序方式整理</title>
    <link href="/2021/07/05/%E6%8E%92%E5%BA%8F%E6%96%B9%E5%BC%8F%E6%95%B4%E7%90%86/"/>
    <url>/2021/07/05/%E6%8E%92%E5%BA%8F%E6%96%B9%E5%BC%8F%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1><span id="js排序方式">JS排序方式</span></h1><h2><span id="冒泡排序">冒泡排序</span></h2><ul><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ul><p><img src="/2021/07/05/%E6%8E%92%E5%BA%8F%E6%96%B9%E5%BC%8F%E6%95%B4%E7%90%86/../public/img/bubbleSort.gif" alt="img"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">12</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">15</span>]<br>     <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buble</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>       <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(arr)) &#123;<br>         <span class="hljs-keyword">let</span> temp<br>         <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>           <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; arr.length - i - <span class="hljs-number">1</span>; j++) &#123;<br>             <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>               temp = arr[j]<br>               arr[j] = arr[j + <span class="hljs-number">1</span>]<br>               arr[j + <span class="hljs-number">1</span>] = temp<br>             &#125;<br>           &#125;<br>         &#125;<br>         <span class="hljs-keyword">return</span> arr<br>       &#125;<br>     &#125;<br>     <span class="hljs-built_in">console</span>.log(buble(arr))<br></code></pre></td></tr></table></figure><h2><span id="选择排序">选择排序</span></h2><p>选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。</p><ul><li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</li><li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li><li>重复第二步，直到所有元素均排序完毕。</li></ul><p><img src="/2021/07/05/%E6%8E%92%E5%BA%8F%E6%96%B9%E5%BC%8F%E6%95%B4%E7%90%86/../public/img/selectionSort.gif" alt="img"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">12</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">15</span>]<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">select</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(arr)) &#123;<br>        <span class="hljs-keyword">let</span> minIndex, temp<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>          minIndex = i<br>          <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = i + <span class="hljs-number">1</span>; j &lt; arr.length; j++) &#123;<br>            <span class="hljs-keyword">if</span> (arr[minIndex] &gt; arr[j]) &#123;<br>              minIndex = j<br>            &#125;<br>          &#125;<br>          temp = arr[i]<br>          arr[i] = arr[minIndex]<br>          arr[minIndex] = temp<br>        &#125;<br>        <span class="hljs-keyword">return</span> arr<br>      &#125;<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(select(arr))<br></code></pre></td></tr></table></figure><h2><span id="插入排序">插入排序</span></h2><ul><li>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</li><li>从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）</li></ul><p><img src="/2021/07/05/%E6%8E%92%E5%BA%8F%E6%96%B9%E5%BC%8F%E6%95%B4%E7%90%86/../public/img/insertionSort.gif" alt="img"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">12</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">15</span>]<br><br>     <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">insert</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>       <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(arr)) &#123;<br>         <span class="hljs-keyword">let</span> preIndex, current<br>         <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>           preIndex = i - <span class="hljs-number">1</span><br>           current = arr[i]<br>           <span class="hljs-keyword">while</span> (preIndex &gt;= <span class="hljs-number">0</span> &amp;&amp; arr[preIndex] &gt; current) &#123;<br>             arr[preIndex + <span class="hljs-number">1</span>] = arr[preIndex]<br>             preIndex--<br>           &#125;<br>           arr[preIndex + <span class="hljs-number">1</span>] = current<br>         &#125;<br>         <span class="hljs-keyword">return</span> arr<br>       &#125;<br>     &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>排序</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>instanceof作用及原理</title>
    <link href="/2021/07/02/instanceof%E4%BD%9C%E7%94%A8%E5%8F%8A%E5%8E%9F%E7%90%86/"/>
    <url>/2021/07/02/instanceof%E4%BD%9C%E7%94%A8%E5%8F%8A%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1><span id="使用场景">使用场景</span></h1><p>instanceof 返回一个布尔值，主要用于判断某对象是不是某个类的实例对象</p><p>比如 判断 new Date() 是不是 Date 类的实例对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> a = <span class="hljs-string">&quot;abc&quot;</span>;<br>    <span class="hljs-built_in">console</span>.log(a <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">String</span>); <span class="hljs-comment">// false</span><br><br>    <span class="hljs-keyword">const</span> b = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br>    <span class="hljs-built_in">console</span>.log(b <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">String</span>); <span class="hljs-comment">// true</span><br><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">String</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">String</span>); <span class="hljs-comment">// false</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>); <span class="hljs-comment">// true</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Function</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Function</span>); <span class="hljs-comment">// true</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Function</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h1><span id="原理">原理</span></h1><p><code>instanceof</code> 运算符用于测试构造函数的 <code>prototype</code> 属性是否出现在对象原型链中的任何位置</p><p>B(Person) 的 <code>prototype</code> 所指向的原型对象确实在 A(p1) 的原型链上，所以我们可以确定 <code>p1 instanceof Person</code> 一定是为 <code>true</code> 的</p><p>换句话说，如果<code>A instanceof B</code>，那么 <code>A</code> 必须是一个对象，而 <code>B</code> 必须是一个合法的 JavaScript 函数。在这两个条件都满足的情况下：</p><p>判断 B 的 prototype 属性指向的原型对象(B.prototype)是否在对象 A 的原型链上。</p><p>如果在，则为 true；如果不在，则为 false。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;&#125; <span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> Person();p1 <span class="hljs-keyword">instanceof</span> Person; <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>所有 JavaScript 对象都有 <code>__proto__</code> 属性，只有 <code>Object.prototype.__proto__ === null</code> ；</li><li>构造函数的 <code>prototype</code> 属性指向它的原型对象，而构造函数实例的 <code>__proto__</code> 属性也指向该原型对象；</li></ul><p><img src="/img/16a1ec1ba426bde0" alt="img"></p><h1><span id="实现instanceof函数">实现instanceof函数</span></h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">instance</span>(<span class="hljs-params">L, R</span>) </span>&#123;<br>      <span class="hljs-keyword">let</span> O = R.prototype<br>      L = L.__proto__<br>      <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">if</span> (L === <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (O === L) &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>        &#125;<br>        L = L.__proto__<br>      &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>instanceof</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dom 的常见操作</title>
    <link href="/2021/07/02/dom%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/"/>
    <url>/2021/07/02/dom%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h3><span id="节点查找api">节点查找API</span></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>box1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>box2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>7<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ipt&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;123&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><h4><span id="getelementsbytagname">getElementsByTagName</span></h4><ul><li><p>根据ID查找元素，返回一个节点对象</p></li><li><p>大小写敏感，如果有多个结果，只返回第一个</p></li><li><p>其他元素不支持</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> app = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;app&#x27;</span>) <br></code></pre></td></tr></table></figure></li></ul></li><li><h4><span id="getelementsbyclassname">getElementsByClassName</span></h4><ul><li><p>根据类型查找元素，多个类名用空格分隔 返回一个 HTMLCollection</p></li><li><p>兼容性为 IE9+(含)</p></li><li><p>不仅仅是 document，其他元素也支持这个方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> body = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;body&#x27;</span>)<br><span class="hljs-keyword">var</span> boxs = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;box&#x27;</span>)<br><span class="hljs-keyword">var</span> boxes = body[<span class="hljs-number">0</span>].getElementsByClassName(<span class="hljs-string">&#x27;box&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(boxs) <span class="hljs-comment">// 返回一个 HTMLCollection 的 伪数组</span><br><span class="hljs-built_in">console</span>.log(boxes) <span class="hljs-comment">// 结果一样</span><br><span class="hljs-built_in">console</span>.log(boxes === boxs) <span class="hljs-comment">// false 虽然结果一样 但是其实是指向不一样的两个伪数组</span><br></code></pre></td></tr></table></figure></li></ul></li><li><h4><span id="getelementsbytagname">getElementsByTagName</span></h4><ul><li><p>根据标签查找元素， * 表示查询所有标签， 返回一个 HTMLCollection伪数组</p></li><li><p>同样适合于其他元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> lis = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;li&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ul></li><li><h4><span id="getelementsbyname">getElementsByName</span></h4><ul><li><p>根据元素的name 属性查找，返回一个 NodeList</p></li><li><p>其他元素不支持</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> ipt = <span class="hljs-built_in">document</span>.getElementsByName(<span class="hljs-string">&#x27;ipt&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ul></li><li><h4><span id="queryselector">querySelector</span></h4><ul><li><p>回单个 Node 匹配到多个也只返回第一个</p></li><li><p>同样支持其他元素 </p></li><li><p>IE8及以上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> li = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;li&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ul></li><li><h4><span id="queryselectorall">querySelectorAll</span></h4><ul><li><p>返回一个 NodeList IE8及其以上</p></li><li><p>同样支持其他元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> lisN = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;li&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ul></li><li><h4><span id="documentforms">document.forms</span></h4><ul><li><p>获取当前页面所有 form, 返回一个 HTMLCollection</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> form = <span class="hljs-built_in">document</span>.forms<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3><span id="节点创建api">节点创建API</span></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;alert(123)&quot;</span>&gt;</span>box1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">var</span> box = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.box&#x27;</span>)</span><br><span class="javascript">      <span class="hljs-comment">// 1.createElement 创建元素</span></span><br><span class="javascript">      <span class="hljs-keyword">var</span> ele = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>)</span><br><span class="javascript">      ele.id = <span class="hljs-string">&#x27;Devin&#x27;</span></span><br><span class="javascript">      ele.style = <span class="hljs-string">&#x27;width: 100px;height: 100px; background-color: red;&#x27;</span></span><br><span class="javascript">      ele.innerHTML = <span class="hljs-string">&#x27;我是创建的节点&#x27;</span></span><br><span class="javascript">      ele.class = <span class="hljs-string">&#x27;add&#x27;</span></span><br><span class="javascript">      box.appendChild(ele) <span class="hljs-comment">// 需要用 append 添加到相应 dom 元素中</span></span><br><span class="javascript">      <span class="hljs-built_in">console</span>.dir(ele)</span><br><span class="javascript">      <span class="hljs-comment">// 不能在 css 文件中设置样式</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 2.createTextNode  创建文本节点</span></span><br><span class="javascript">      <span class="hljs-keyword">var</span> node = <span class="hljs-built_in">document</span>.createTextNode(<span class="hljs-string">&#x27;我是文本节点&#x27;</span>)</span><br><span class="javascript">      box.appendChild(node)</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 3. cloneNode 克隆一个节点</span></span><br><span class="javascript">      <span class="hljs-comment">//   node.cloneNode(true/false) 接收一个bool参数，用来表示是否复制子元素</span></span><br><span class="javascript">      <span class="hljs-keyword">var</span> clone = box.cloneNode(<span class="hljs-literal">true</span>)</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(clone)</span><br><span class="javascript">      box.appendChild(clone)</span><br><span class="javascript">      <span class="hljs-comment">// 克隆不会克隆事件 除非是在 标签内绑定</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// createDocumentFragment</span></span><br><span class="javascript">      <span class="hljs-comment">//  创建一个文档碎片 表示一种轻量级的文档，主要是用来存储临时节点</span></span><br><span class="javascript">      <span class="hljs-comment">// 大量操作时可以大大提高性能</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><h4><span id="createelement">createElement</span></h4><ul><li><p>创建元素</p></li><li><p>创建的元素不能再 css 中设置样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> box = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.box&#x27;</span>)<br>     <span class="hljs-comment">// 1.createElement 创建元素</span><br>     <span class="hljs-keyword">var</span> ele = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>)<br>     ele.id = <span class="hljs-string">&#x27;Devin&#x27;</span><br>     ele.style = <span class="hljs-string">&#x27;width: 100px;height: 100px; background-color: red;&#x27;</span><br>     ele.innerHTML = <span class="hljs-string">&#x27;我是创建的节点&#x27;</span><br>     ele.class = <span class="hljs-string">&#x27;add&#x27;</span><br>     box.appendChild(ele) <span class="hljs-comment">// 需要用 append 添加到相应 dom 元素中</span><br>     <span class="hljs-built_in">console</span>.dir(ele)<br>     <span class="hljs-comment">// 不能在 css 文件中设置样式</span><br></code></pre></td></tr></table></figure></li></ul></li><li><h4><span id="createtextnode">createTextNode</span></h4><ul><li><p>创建文本节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> node = <span class="hljs-built_in">document</span>.createTextNode(<span class="hljs-string">&#x27;我是文本节点&#x27;</span>)<br>box.appendChild(node)<br></code></pre></td></tr></table></figure></li></ul></li><li><h4><span id="clonenode">cloneNode</span></h4><ul><li><p>node.cloneNode(true/false) 接收一个bool参数，用来表示是否复制子元素</p></li><li><p>克隆不会克隆事件，除非是在标签内绑定的事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> clone = box.cloneNode(<span class="hljs-literal">true</span>)<br><span class="hljs-built_in">console</span>.log(clone)<br>box.appendChild(clone)<br></code></pre></td></tr></table></figure></li></ul></li><li><h4><span id="createdocumentfragment">createDocumentFragment</span></h4><ul><li><p>创建一个文档碎片 表示一种轻量级的文档，主要是用来存储临时节点</p></li><li><p>大量操作时可以大大提高性能</p></li></ul></li></ul><h3><span id="节点修改api">节点修改API</span></h3><ul><li><h4><span id="appendchild">appendChild</span></h4><p>用于插入其他元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;parent&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">var</span> par = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.parent&#x27;</span>)</span><br><span class="javascript">      <span class="hljs-keyword">var</span> p = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;p&#x27;</span>)</span><br><span class="javascript">      p.innerHTML = <span class="hljs-string">&#x27;被创造出来的 p&#x27;</span></span><br><span class="javascript">      par.appendChild(p)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><h4><span id="insertbefore">insertBefore</span></h4><ul><li>insertBefore填入两个参数（必须），第一个参数是需要插入的节点，第二个参数是排在哪个子节点之前</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;parent&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">     <span class="hljs-keyword">var</span> par = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.parent&#x27;</span>)</span><br><span class="javascript">     <span class="hljs-keyword">var</span> p1 = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;p&#x27;</span>)</span><br><span class="javascript">     p1.innerHTML = <span class="hljs-string">&#x27;被创造出来的 p1&#x27;</span></span><br><span class="javascript">     <span class="hljs-keyword">var</span> p2 = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;p&#x27;</span>)</span><br><span class="javascript">     p2.innerHTML = <span class="hljs-string">&#x27;insertBefore 节点&#x27;</span></span><br><span class="javascript">     par.appendChild(p1)</span><br><span class="javascript">     par.insertBefore(p2, <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.son&#x27;</span>))</span><br><span class="javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><h4><span id="insertadjacenthtml">insertAdjacentHTML</span></h4><ul><li>用于在相邻或者内部插入 htmlString</li><li>用法如下</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;parent&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">     <span class="hljs-keyword">var</span> son = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.son&#x27;</span>)</span><br><span class="javascript">     son.insertAdjacentHTML(</span><br><span class="javascript">       <span class="hljs-string">&#x27;beforebegin&#x27;</span>,</span><br><span class="javascript">       <span class="hljs-string">&#x27;&lt;p&gt;用insertAdjacentHTML 插入的标签p &lt;/p&gt;&#x27;</span></span><br><span class="javascript">     )</span><br><span class="javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>第一个参数表示插入位置，只能是以下四个字符串</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- beforebegin --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- afterbegin --&gt;</span><br>  foo<br>  <span class="hljs-comment">&lt;!-- beforeend --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-comment">&lt;!-- afterend --&gt;</span><br></code></pre></td></tr></table></figure><p>这四个字符串表示插入的不同位置</p></li><li><p>第二个参数是需要插入的 htmlString</p></li><li><p>此方法需要解析html代码转义使用，如果插入的是文本，不建议使用该方法</p></li><li><p>兼容性：js谷歌浏览器，火狐浏览器，IE8+</p></li></ul></li><li><h4><span id="insertadjacentelement">insertAdjacentElement</span></h4><p>用法和上面类似，只是第二个参数 为一个 element</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;parent&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">var</span> son = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.son&#x27;</span>)</span><br><span class="javascript">      <span class="hljs-keyword">var</span> p = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;p&#x27;</span>)</span><br><span class="javascript">      p.innerHTML = <span class="hljs-string">&#x27;用insertAdjacentHTML 插入的标签p&#x27;</span></span><br><span class="javascript">      son.insertAdjacentElement(<span class="hljs-string">&#x27;beforebegin&#x27;</span>, p)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><h4><span id="removechild">removeChild</span></h4><p>用于删除指定的子节点并返回子节点</p><p><strong>注意：</strong>必须是子节点，不然会报错</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;parent&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">var</span> par = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.parent&#x27;</span>)</span><br><span class="javascript">      <span class="hljs-keyword">var</span> remove = par.removeChild(par.children[<span class="hljs-number">0</span>])</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(remove) <span class="hljs-comment">// son 节点</span></span><br></code></pre></td></tr></table></figure></li><li><h4><span id="replacechild">replaceChild</span></h4><p>replaceChild 用于将一个节点替换另一个节点</p></li></ul><h3><span id="节点关系api">节点关系API</span></h3><ul><li><h4><span id="父关系api">父关系API</span></h4><ul><li><h5><span id="parentnode">parentNode</span></h5><p>每个节点都有一个parentNode属性，它表示元素的父节点。Element的父节点可能是Element，Document或DocumentFragment</p></li><li><h5><span id="parentelement">parentElement</span></h5><p>返回元素的父元素节点，与parentNode的区别在于，其父节点必须是一个Element元素，如果不是，则返回null</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;parent&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p 节点<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">     <span class="hljs-keyword">var</span> p = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;p&#x27;</span>)</span><br><span class="javascript">     <span class="hljs-keyword">var</span> par = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.parent&#x27;</span>)</span><br><span class="javascript">     <span class="hljs-keyword">var</span> son = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.son&#x27;</span>)</span><br><span class="javascript">     <span class="hljs-built_in">console</span>.dir(son.parentElement.parentElement) <span class="hljs-comment">// par 节点</span></span><br><span class="javascript">     <span class="hljs-built_in">console</span>.log(son.parentNode) <span class="hljs-comment">// 也是 par 节点</span></span><br><span class="javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><h4><span id="子关系api">子关系API</span></h4><ul><li><h5><span id="children">children</span></h5><p>返回一个实时的 HTMLCollection 子节点都是Element IE9+</p></li><li><h5><span id="childnodes">childNodes</span></h5><p>返回一个实时的 NodeList 表示元素的子节点列表  子节点中包含文本节点</p></li><li><h5><span id="firstchild">firstChild</span></h5><p>返回第一个子节点，包含文本节点，不存在返回 null</p></li><li><h5><span id="firstelementchild">firstElementChild</span></h5><p>返回第一个 element 元素</p></li><li><h5><span id="lastchild">lastChild</span></h5><p>返回最后一个子节点，包含文本节点，不存在返回 null</p></li><li><h5><span id="lastelementchild">lastElementChild</span></h5><p>返回最后一个 element 元素</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;parent&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">     <span class="hljs-keyword">var</span> par = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.parent&#x27;</span>)</span><br><span class="javascript">     <span class="hljs-keyword">var</span> son = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.son&#x27;</span>)</span><br><span class="javascript">     <span class="hljs-built_in">console</span>.log(par.children) <span class="hljs-comment">// HTMLCollection</span></span><br><span class="javascript">     <span class="hljs-built_in">console</span>.log(par.childNodes) <span class="hljs-comment">// NodeList 包含文本节点text 空格也算</span></span><br><span class="javascript">     <span class="hljs-built_in">console</span>.log(par.firstChild) <span class="hljs-comment">// text节点 父盒子中子节点上下都有空格</span></span><br><span class="javascript">     <span class="hljs-built_in">console</span>.log(par.lastChild) <span class="hljs-comment">// 同样 text 节点</span></span><br><span class="javascript">     <span class="hljs-built_in">console</span>.log(par.firstElementChild) <span class="hljs-comment">// .son</span></span><br><span class="javascript">     <span class="hljs-built_in">console</span>.log(par.lastElementChild) <span class="hljs-comment">// .son</span></span><br><span class="javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><h4><span id="兄弟关系api">兄弟关系API</span></h4><ul><li><h5><span id="previoussibling">previousSibling</span></h5><p>返回前一个节点，如果不存在则返回null。注意有可能拿到的节点是文本节点或注释节点，与预期的不符，要进行处理一下。</p></li><li><h5><span id="nextsibling">nextSibling</span></h5><p>返回后一个节点，如果不存在则返回null。注意有可能拿到的节点是文本节点，与预期的不符，要进行处理一下。 </p></li><li><h5><span id="previouselementsibling">previousElementSibling</span></h5><p>返回前一个元素节点，前一个节点必须是Element，注意IE9以下浏览器不支持。</p></li><li><h5><span id="nextelementsibling">nextElementSibling</span></h5><p>返回后一个元素节点，后一个节点必须是Element，注意IE9以下浏览器不支持。 </p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;parent&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>前面的兄弟<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>后面的兄弟<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">var</span> par = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.parent&#x27;</span>)</span><br><span class="javascript">      <span class="hljs-keyword">var</span> son = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.son&#x27;</span>)</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(son.previousSibling) <span class="hljs-comment">// text</span></span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(son.previousElementSibling) <span class="hljs-comment">// 前面的 p</span></span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(son.nextSibling) <span class="hljs-comment">// text</span></span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(son.nextElementSibling) <span class="hljs-comment">// 后面的 p</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3><span id="元素属性api">元素属性API</span></h3><ul><li><h4><span id="setattribute">setAttribute</span></h4><p>给元素设置属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;parent&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>前面的兄弟<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>后面的兄弟<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">     <span class="hljs-keyword">var</span> par = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.parent&#x27;</span>)</span><br><span class="javascript">     <span class="hljs-keyword">var</span> son = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.son&#x27;</span>)</span><br><span class="javascript">     son.setAttribute(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;booker&#x27;</span>)</span><br><span class="javascript">     son.setAttribute(<span class="hljs-string">&#x27;win&#x27;</span>, <span class="hljs-string">&#x27;suns&#x27;</span>)</span><br><span class="javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><h4><span id="getattribute">getAttribute</span></h4><p>getAttribute返回指定的特性名相应的特性值，如果不存在，则返回null</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;parent&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>前面的兄弟<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>后面的兄弟<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">     <span class="hljs-keyword">var</span> par = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.parent&#x27;</span>)</span><br><span class="javascript">     <span class="hljs-keyword">var</span> son = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.son&#x27;</span>)</span><br><span class="javascript">     son.setAttribute(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;booker&#x27;</span>)</span><br><span class="javascript">     son.setAttribute(<span class="hljs-string">&#x27;win&#x27;</span>, <span class="hljs-string">&#x27;suns&#x27;</span>)</span><br><span class="javascript">     <span class="hljs-keyword">var</span> getAt = son.getAttribute(<span class="hljs-string">&#x27;win&#x27;</span>)</span><br><span class="javascript">     <span class="hljs-built_in">console</span>.log(getAt) <span class="hljs-comment">// suns</span></span><br><span class="javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><h4><span id="hasattribute">hasAttribute</span></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;parent&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>前面的兄弟<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>后面的兄弟<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">var</span> par = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.parent&#x27;</span>)</span><br><span class="javascript">      <span class="hljs-keyword">var</span> son = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.son&#x27;</span>)</span><br><span class="javascript">      son.setAttribute(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;booker&#x27;</span>)</span><br><span class="javascript">      son.setAttribute(<span class="hljs-string">&#x27;win&#x27;</span>, <span class="hljs-string">&#x27;suns&#x27;</span>)</span><br><span class="javascript">      <span class="hljs-keyword">var</span> getAt = son.getAttribute(<span class="hljs-string">&#x27;win&#x27;</span>)</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(son.hasAttribute(<span class="hljs-string">&#x27;win&#x27;</span>)) <span class="hljs-comment">// true</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><h5><span id="dataset">dataset</span></h5><p><code>**HTMLElement.dataset**</code>属性允许无论是在读取模式和写入模式下访问在 HTML或 DOM中的元素上设置的所有<a href="https://developer.mozilla.org/en/HTML/Global_attributes#attr-data-*">自定义数据属性</a>(*data-**)集。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;parent&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>前面的兄弟<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span> <span class="hljs-attr">data-point</span>=<span class="hljs-string">&quot;71&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>后面的兄弟<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">     <span class="hljs-keyword">var</span> par = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.parent&#x27;</span>)</span><br><span class="javascript">     <span class="hljs-keyword">var</span> son = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.son&#x27;</span>)</span><br><span class="javascript">     son.setAttribute(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;booker&#x27;</span>)</span><br><span class="javascript">     son.setAttribute(<span class="hljs-string">&#x27;win&#x27;</span>, <span class="hljs-string">&#x27;suns&#x27;</span>)</span><br><span class="javascript">     <span class="hljs-keyword">var</span> getAt = son.getAttribute(<span class="hljs-string">&#x27;win&#x27;</span>)</span><br><span class="javascript">     <span class="hljs-built_in">console</span>.log(son.hasAttribute(<span class="hljs-string">&#x27;win&#x27;</span>)) <span class="hljs-comment">// true</span></span><br><span class="javascript">     <span class="hljs-built_in">console</span>.log(son.dataset) <span class="hljs-comment">// DOMStringMap &#123;point: &quot;71&quot;&#125;</span></span><br><span class="javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3><span id="样式相关api">样式相关API</span></h3><ul><li><h4><span id="直接修改元素的样式">直接修改元素的样式</span></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">      <span class="hljs-attribute">background-color</span>: chocolate;</span><br><span class="css">    &#125;</span><br><span class="css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>box<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> box = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.box&#x27;</span>)</span><br><span class="javascript">    box.style.color = <span class="hljs-string">&#x27;red&#x27;</span></span><br><span class="javascript">    box.style.setProperty(<span class="hljs-string">&#x27;font-size&#x27;</span>, <span class="hljs-string">&#x27;28px&#x27;</span>)</span><br><span class="javascript">    box.style.removeProperty(<span class="hljs-string">&#x27;color&#x27;</span>)</span><br><span class="javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><h4><span id="动态添加样式规则">动态添加样式规则</span></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>box<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">var</span> box = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.box&#x27;</span>)</span><br><span class="javascript">      <span class="hljs-keyword">var</span> style = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;style&#x27;</span>)</span><br><span class="javascript">      style.innerHTML = <span class="hljs-string">&#x27;.box &#123;background-color: red; color: white&#125;&#x27;</span></span><br><span class="javascript">      <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;head&#x27;</span>).appendChild(style)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><h4><span id="classlist获取样式-class">classList获取样式 class</span></h4><ul><li><h5><span id="classlistadd">classList.add</span></h5><p>增加该样式</p></li><li><h5><span id="classlistremove">classList.remove</span></h5><p>去除该样式</p></li><li><h5><span id="classlisttonggle">classList.tonggle</span></h5><p>如果有该样式，则去除，如果没有，则增加</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: chocolate;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-class">.font</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">28px</span>;</span><br><span class="css">        <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">700</span>;</span><br><span class="css">        <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-class">.border</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">5px</span> solid green;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box font&quot;</span>&gt;</span>box<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>切换字体样式<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">var</span> box = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.box&#x27;</span>)</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(box.classList) <span class="hljs-comment">// DOMTokenList(2) [&quot;box&quot;, &quot;font&quot;, value: &quot;box font&quot;]</span></span><br><span class="javascript">      box.classList.remove(<span class="hljs-string">&#x27;font&#x27;</span>)</span><br><span class="javascript">      box.classList.add(<span class="hljs-string">&#x27;border&#x27;</span>)</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(box.classList) <span class="hljs-comment">// 也是一个伪数组</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>).addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        box.classList.toggle(<span class="hljs-string">&#x27;font&#x27;</span>)</span><br><span class="javascript">      &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><h4><span id="windowgetcomputedstyle">window.getComputedStyle</span></h4><p>通过 element.sytle.xxx 只能获取到内联样式,也就是采用 style属性定义的样式（权重最高）</p><p>借助 window.getComputedStyle 可以获取应用到元素上的所有样式，IE8或更低版本不支持此方法。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.getComputedStyle(box).border) <span class="hljs-comment">// 5px solid rgb(0, 128, 0)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dom操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TCP/IP 分层管理</title>
    <link href="/2021/07/02/TCPIP%E5%88%86%E5%B1%82%E7%AE%A1%E7%90%86/"/>
    <url>/2021/07/02/TCPIP%E5%88%86%E5%B1%82%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1><span id="tcpip-分层管理">TCP/IP 分层管理</span></h1><h2><span id="tcpip概念">TCP/IP概念</span></h2><p>TCP/IP（Transmission Control Protocol/Internet Protocol，传输控制协议/网际协议）是指能够在多个不同网络间实现信息传输的协议簇</p><h2><span id="分层管理">分层管理</span></h2><h3><span id="目的">目的</span></h3><p>计算机网络是个非常复杂的系统，“分层”可将庞大而复杂的问题，转化为若干较小的局部问题，而这些较小的局部问题就比较容易研究和处理。“分层”还有利于对于协议进行改进和更新，当我们对某协议进行改动时，我们只需要处理好有关接口的问题，就可以在里面根据需求随意改动了。</p><h3><span id="三种分层体系结构">三种分层体系结构</span></h3><h4><span id="osi体系结构">OSI体系结构</span></h4><p>为了使不同体系结构的计算机网络结构能互联<br>国际标准化组织提出了开放系统互联参考模型，即OSI结构体系，法律上的国际标准</p><p><img src="/img/image-20210702113846713.png" alt="image-20210702113846713"></p><h4><span id="tcpip体系结构">TCP/IP体系结构</span></h4><p>应用最广的英特网使用 TCP/IP 协议族，并逐渐演化为TCP/IP 参考模型，也叫TCP/IP协议栈，是事实上的国际标准</p><p><img src="/img/image-20210702114102308.png" alt="image-20210702114102308"></p><h4><span id="原理体系结构">原理体系结构</span></h4><p>我们用于学习和理解的一般是五层原理体系结构</p><p><img src="/img/image-20210702114355165.png" alt="image-20210702114355165"></p><p>计算机网络是个非常复杂的系统，“分层”可将庞大而复杂的问题，转化为若干较小的局部问题，而这些较小的局部问题就比较容易研究和处理。“分层”还有利于对于协议进行改进和更新，当我们对某协议进行改动时，我们只需要处理好有关接口的问题，就可以在里面根据需求随意改动了。</p><h3><span id="五层原理体系">五层原理体系</span></h3><h4><span id="物理层">物理层</span></h4><p>解决使用何种信号来传输比特的问题</p><h4><span id="数据链路层">数据链路层</span></h4><p>解决分组在一个网络（或一段链路）上传输的问题</p><p><strong>链路：</strong>就是从一个节点到相邻节点的一段物理线路，而中间没有任何其他的交换结点</p><p><strong>数据链路：</strong>是指把实现通信协议的硬件和软件加到链路上，就构成了数据链路。</p><p>数据链路层以帧为单位传输和处理数据。</p><p>三个重要问题：</p><ul><li>封装成帧</li><li>差错检测</li><li>可靠传输</li></ul><h4><span id="网络层">网络层</span></h4><p>解决分组在多个网络传输（路由）的问题</p><p>网络层主要任务是实现网络互联，进而实现数据包在各网络之间的传输</p><p>要实现网络层任务，需要解决以下主要问题</p><ul><li><p>网络层向运输层提供怎样的服务（“可靠传输”还是“不可靠传输”）（“不可靠传输”是对可能会出现的误码，丢弃，失序等问题不采取任何措施，反之则为“可靠传输”）英特网使用的 TCP/IP 网际层使用的是无连接的不可靠的数据包服务</p><p>由于英特网是用户数量最多的互联网，它使用的是 TCP/IP 协议栈，是整个协议栈的核心，所以TCP/IP协议栈中的网络层也称为网际层。我们通过 TCP/IP 协议栈的网际层来学习网络层的理论知识和实践技术</p></li><li><p>寻址问题</p></li><li><p>路由选择问题</p></li></ul><h4><span id="运输层">运输层</span></h4><p>解决进程之间基于网络的通信问题</p><p>物理层，数据链路层以及网络层共同解决了将主机通过异构网络互联起来所面临的问题，实现了主机到主机的通信<br>但实际上计算机网络中进行通信的真正实体是位于通信两端主机中的进程</p><p>传输层解决如何为运行在不同主机上的应用进程提供直接的通信服务，运输层又称端到端协议</p><p>在传输层有两个性质不同的协议: TCP ( Transmission ControlProtocol,传输控制协议)和UDP ( User Data Protocol,用户数据报协议)。</p><h4><span id="应用层">应用层</span></h4><p>解决通过应用进程的交互来实现特定网络应用的问题</p><p>应用层是计算机网络体系结构的最顶层，是设计和建立计算机网络的最终目的，也是计算机网络中发展最快的部分</p><p>FTP ( FileTransfer Protocol,文件传输协议)和DNS ( Domain Name System，域名系统)服务就是其中两类。<br>HTTP协议也处于该层。</p>]]></content>
    
    
    <categories>
      
      <category>计算机网络基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TCP/IP</tag>
      
      <tag>分层管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ajax</title>
    <link href="/2021/07/02/ajax/"/>
    <url>/2021/07/02/ajax/</url>
    
    <content type="html"><![CDATA[<h1><span id="ajax">Ajax</span></h1><h2><span id="应用场景">应用场景</span></h2><p>AJAX即“Asynchronous Javascript And XML”。AJAX 可以快速创建动态网页，可以只向服务器请求数据（不会重新请求页面），让互联网资源的传输变得更加轻量和简便。比如一次不请求完页面，而是下拉刷新再继续请求。</p><h2><span id="基础">基础</span></h2><h3><span id="概念">概念</span></h3><p>Ajax是一种异步请求数据的web开发技术，对于改善用户的体验和页面性能很有帮助。简单地说，在不需要重新刷新页面的情况下，Ajax 通过异步请求加载后台数据，并在网页上呈现出来。常见运用场景有表单验证是否登入成功、百度搜索下拉框提示和快递单号查询等等。<strong>Ajax的目的是提高用户体验，较少网络数据的传输量。</strong>同时，由于AJAX请求获取的是数据而不是HTML文档，因此它也节省了网络带宽，让互联网用户的网络冲浪体验变得更加顺畅。</p><p>一句话说就是通过异步请求，在不重新请求页面的情况下快速向服务端请求数据</p><h3><span id="原理">原理</span></h3><p>在解释Ajax原理之前，我们不妨先举个“领导想找小李汇报一下工作”例子，领导想找小李问点事，就委托秘书去叫小李，自己就接着做其他事情，直到秘书告诉他小李已经到了，最后小李跟领导汇报工作。</p><p>Ajax请求数据流程与“领导想找小李汇报一下工作”类似。其中最核心的依赖是浏览器提供的XMLHttpRequest对象，它扮演的角色相当于秘书，使得浏览器可以发出HTTP请求与接收HTTP响应。浏览器接着做其他事情，等收到XHR返回来的数据再渲染页面。</p><p>这也就是js 异步编程的原理：</p><p>由于js 是单线程语言，也就是一次只能做一件事，并且执行流程是同步执行，也就是做完一件事之后再做下一件。</p><p>如果有的执行结果需要等待很久，就会大大的影响用户的体验，所以这些需要等待的函数也就是异步函数，需要放在一个不影响主线程执行的子线程中执行，执行完毕后再通过回调函数拿到执行结果。</p><h2><span id="运用">运用</span></h2><h3><span id="1创建ajax核心对象-xmlhttprequest考虑兼容性">1.创建Ajax核心对象 XMLHttpRequest（考虑兼容性）</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> xhr = <span class="hljs-literal">null</span><br>     <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.XMLHttpRequest) &#123;<br>       <span class="hljs-comment">// 兼容 IE7+ FireFox Chrome Opera Safari</span><br>       xhr = <span class="hljs-keyword">new</span> XMLHttpRequest()<br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>       <span class="hljs-comment">// 兼容 IE6 IE5</span><br>       xhr = <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&#x27;Microsoft.XMLHTTP&#x27;</span>)<br>     &#125;<br></code></pre></td></tr></table></figure><h3><span id="2向服务器发送请求">2.向服务器发送请求</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">1.</span> xhr.open(method,url,<span class="hljs-keyword">async</span>);  <br><span class="hljs-number">2.</span> send(string);<span class="hljs-comment">//post请求时才使用字符串参数，否则不用带参数。</span><br></code></pre></td></tr></table></figure><ul><li>method：请求的类型；GET 或 POST</li><li>url：文件在服务器上的位置</li><li>async：true（异步）或 false（同步） <strong>注意：post请求一定要设置请求头的格式内容</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">xhr.open(<span class="hljs-string">&quot;POST&quot;</span>,<span class="hljs-string">&quot;test.html&quot;</span>,<span class="hljs-literal">true</span>);  <br>xhr.setRequestHeader(<span class="hljs-string">&quot;Content-type&quot;</span>,<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>);  <br>xhr.send(<span class="hljs-string">&quot;fname=Henry&amp;lname=Ford&quot;</span>);  <span class="hljs-comment">//post请求参数放在send里面，即请求体</span><br></code></pre></td></tr></table></figure><h3><span id="3服务器响应处理区分同步跟异步两种情况">3.服务器响应处理（区分同步跟异步两种情况）</span></h3><ul><li>responseText 获得字符串形式的响应数据。</li><li>responseXML 获得XML 形式的响应数据。</li></ul><h4><span id="同步处理">同步处理</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">1.</span> xhr.open(<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;info.txt&quot;</span>,<span class="hljs-literal">false</span>);  <br><span class="hljs-number">2.</span> xhr.send();  <br><span class="hljs-number">3.</span> <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;myDiv&quot;</span>).innerHTML=xhr.responseText; <span class="hljs-comment">//获取数据直接显示在页面上</span><br></code></pre></td></tr></table></figure><h4><span id="异步处理">异步处理</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">1.</span> xhr.onreadystatechange=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)  </span>&#123; <br>    <span class="hljs-comment">// 固定写法</span><br><span class="hljs-number">2.</span>    <span class="hljs-keyword">if</span> (xhr.readyState==<span class="hljs-number">4</span> &amp;&amp;xhr.status==<span class="hljs-number">200</span>)  &#123; <br><span class="hljs-number">3.</span>       <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;myDiv&quot;</span>).innerHTML=xhr.responseText;  <br><span class="hljs-number">4.</span>      &#125;<br><span class="hljs-number">5.</span>    &#125; <br></code></pre></td></tr></table></figure><h5><span id="readystate">readyState</span></h5><p>readyState是XMLHttpRequest对象的一个属性，用来标识当前XMLHttpRequest对象处于什么状态。 readyState总共有5个状态值，分别为0~4，每个值代表了不同的含义</p><ul><li>0：未初始化 – 尚未调用.open()方法；</li><li>1：启动 – 已经调用.open()方法，但尚未调用.send()方法；</li><li>2：发送 – 已经调用.send()方法，但尚未接收到响应；</li><li>3：接收 – 已经接收到部分响应数据；</li><li>4：完成 – 已经接收到全部响应数据，而且已经可以在客户端使用了；</li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ajax</tag>
      
      <tag>前后端交互</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>合并两个有序数组</title>
    <link href="/2021/07/02/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    <url>/2021/07/02/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1><span id="88合并有序数组">（88）合并有序数组</span></h1><h2><span id="题目描述">题目描述</span></h2><p>给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。</p><p>初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。你可以假设 nums1 的空间大小等于 m + n，这样它就有足够的空间保存来自 nums2 的元素。</p><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">输入：nums1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>], m = <span class="hljs-number">3</span>, nums2 = [<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>], n = <span class="hljs-number">3</span><br>输出：[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br></code></pre></td></tr></table></figure><h2><span id="解题">解题</span></h2><h3><span id="解法一合并后排序">解法一：合并后排序</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> nums1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>      m = <span class="hljs-number">3</span>,<br>      nums2 = [<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>],<br>      n = <span class="hljs-number">3</span><br>    <span class="hljs-keyword">var</span> merge = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums1, m, nums2, n</span>) </span>&#123;<br>      nums1.splice(m, nums1.length - m, ...nums2)<br>      nums1.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a - b)<br>      <span class="hljs-keyword">return</span> nums1<br>    &#125;<br></code></pre></td></tr></table></figure><h4><span id="复杂度分析">复杂度分析：</span></h4><ul><li><p>时间复杂度： O((m + n) log(m + n))</p><p>排序序列长度为 m + n，套用快速排序的时间复杂度即可，平均情况为 O((m + n) log(m + n))</p></li><li><p>空间复杂度：O(log(m + n))<br>排序序列长度为 m + n，套用快速排序的空间复杂度即可，平均情况为 O(log(m + n))。</p></li></ul><h3><span id="解法二双指针">解法二：双指针</span></h3><p>方法一没有利用两数组已经被排序的性质。为了利用这一性质，我们可以使用双指针方法。</p><p><img src="/img/%E7%AE%97%E6%B3%9588%E5%9B%BE%E4%B8%80.gif" alt="算法88图一"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> nums1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>      m = <span class="hljs-number">3</span>,<br>      nums2 = [<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>],<br>      n = <span class="hljs-number">3</span><br><br>    <span class="hljs-keyword">var</span> merge = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums1, m, nums2, n</span>) </span>&#123;<br>      <span class="hljs-keyword">const</span> sort = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(m + n).fill(<span class="hljs-number">0</span>)<br>      <span class="hljs-keyword">let</span> p1 = <span class="hljs-number">0</span><br>      <span class="hljs-keyword">let</span> p2 = <span class="hljs-number">0</span><br>      <span class="hljs-keyword">let</span> cur<br>      <span class="hljs-keyword">while</span> (p1 &lt; m || p2 &lt; n) &#123;<br>        <span class="hljs-keyword">if</span> (p1 == m) &#123;<br>          cur = nums2[p2++]<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p2 == n) &#123;<br>          cur = nums1[p1++]<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums1[p1] &gt; nums2[p2]) &#123;<br>          cur = nums2[p2++]<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          cur = nums1[p1++]<br>        &#125;<br>        sort[p1 + p2 - <span class="hljs-number">1</span>] = cur<br>      &#125;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; m + n; i++) &#123;<br>        nums1[i] = sort[i]<br>      &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h4><span id="复杂度分析">复杂度分析：</span></h4><ul><li><p>时间复杂度：O(m+n)。<br>指针移动单调递增，最多移动 m+n 次，因此时间复杂度为 O(m+n)。</p></li><li><p>空间复杂度：O(m+n)。<br>需要建立长度为 m+n 的中间数组 sorted。</p></li></ul><h3><span id="解法三逆向双指针">解法三：逆向双指针</span></h3><p>方法二没有利用 nums1 的空间永远足够的条件</p><p>我们可以用逆向双指针直接在 nums1 上原地修改从而节约空间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> merge = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums1, m, nums2, n</span>) </span>&#123;<br>        <span class="hljs-keyword">let</span> p1 = m - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">let</span> p2 = n - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">let</span> tail = m + n - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">let</span> cur<br>        <span class="hljs-keyword">while</span> (p1 &gt;= <span class="hljs-number">0</span> || p2 &gt;= <span class="hljs-number">0</span>) &#123;<br>          <span class="hljs-keyword">if</span> (p1 == -<span class="hljs-number">1</span>) &#123;<br>            cur = nums2[p2--]<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p2 == -<span class="hljs-number">1</span>) &#123;<br>            cur = nums1[p1--]<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums1[p1] &gt; nums2[p2]) &#123;<br>            cur = nums1[p1--]<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            cur = nums2[p2--]<br>          &#125;<br>          nums1[tail--] = cur<br>        &#125;<br>      &#125;<br></code></pre></td></tr></table></figure><h4><span id="复杂度分析">复杂度分析：</span></h4><ul><li><p>时间复杂度：O(m+n)<br>指针移动单调递减，最多移动 m+n 次，因此时间复杂度为 O(m+n)。</p></li><li><p>空间复杂度：O(1)。<br>直接对数组 nums 1原地修改，不需要额外空间。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>有序数组合并</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符串相加</title>
    <link href="/2021/07/02/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%8A%A0/"/>
    <url>/2021/07/02/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%8A%A0/</url>
    
    <content type="html"><![CDATA[<h1><span id="415字符串相加">(415)字符串相加</span></h1><h2><span id="题目描述">题目描述：</span></h2><p>给定两个字符串形式的非负整数 <code>num1</code> 和<code>num2</code> ，计算它们的和。</p><h2><span id="提示">提示：</span></h2><p>num1 和num2 的长度都小于 5100<br>num1 和num2 都只包含数字 0-9<br>num1 和num2 都不包含任何前导零<br>你不能使用任何內建 BigInteger 库， 也不能直接将输入的字符串转换为整数形式</p><h2><span id="思路">思路：</span></h2><p>双指针放两个字符串后方，取每个字符相加的结果，将结果的余数放入数组，满十进一</p><p>需要注意的是对于字符串不一样长的需要补0</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> addStrings = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">num1, num2</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> p1 = num1.length - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">let</span> p2 = num2.length - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">let</span> add = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">let</span> ans = []<br>        <span class="hljs-keyword">while</span> (p1 &gt;= <span class="hljs-number">0</span> || p2 &gt;= <span class="hljs-number">0</span> || add != <span class="hljs-number">0</span>) &#123;<br>          <span class="hljs-comment">// 补零操作 不然会出现 NaN</span><br>          <span class="hljs-keyword">const</span> x = p1 &gt;= <span class="hljs-number">0</span> ? num1.charAt(p1) - <span class="hljs-number">0</span> : <span class="hljs-number">0</span><br>          <span class="hljs-keyword">const</span> y = p2 &gt;= <span class="hljs-number">0</span> ? num2.charAt(p2) - <span class="hljs-number">0</span> : <span class="hljs-number">0</span><br>          <span class="hljs-keyword">const</span> res = x + y + add<br>          ans.push(res % <span class="hljs-number">10</span>)<br>          add = <span class="hljs-built_in">Math</span>.floor(res / <span class="hljs-number">10</span>)<br>          p1--<br>          p2--<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans.reverse().join(<span class="hljs-string">&#x27;&#x27;</span>)<br>&#125;;<br></code></pre></td></tr></table></figure><h3><span id="复杂度分析">复杂度分析：</span></h3><ul><li><p>时间复杂度： O(max(len1, len2))，其中 len1 = num1.length, len2 = num2.length。</p><p>竖式加法的次数取决于较大数的位数。</p></li><li><p>空间复杂度： O(1)。 除答案外我们只需要常数空间存放若干变量。</p></li></ul><h2><span id="反思">反思：</span></h2><p>在 LeetCode 上查看执行效率</p><p>push 的 效率比 unshift 高？</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字符串相加</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue的基础语法</title>
    <link href="/2021/07/01/Vue%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/"/>
    <url>/2021/07/01/Vue%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1><span id="1vue的优点">1.Vue的优点</span></h1><p><strong>Vue：渐进式JavaScript框架</strong></p><p>声明式渲染→组件系统→客户端路由→集中式状态管理→项目构建</p><ul><li>轻量级框架：只关注视图层，是一个构建数据的视图集合，大小只有几十kb；</li><li>简单易学：国人开发，中文文档，不存在语言障碍 ，易于理解和学习；</li><li>双向数据绑定：保留了angular的特点，在数据操作方面更为简单；</li><li>组件化：保留了react的优点，实现了html的封装和重用，在构建单页面应用方面有着独特的优势；</li><li>视图，数据，结构分离：使数据的更改更为简单，不需要进行逻辑代码的修改，只需要操作数据就能完成相关操作；</li><li>虚拟DOM：dom操作是非常耗费性能的，不再使用原生的dom操作节点，极大解放dom操作，但具体操作的还是dom不过是换了另一种方式；</li><li>运行速度更快:相比较与react而言，同样是操作虚拟dom，就性能而言，vue存在很大的优势。</li></ul><h1><span id="2vue的基础语法">2.Vue的基础语法</span></h1><h2><span id="21插值表达式">2.1.插值表达式</span></h2><p><strong>目的：</strong></p><p>将数据填充到 vue 实例中</p><p><strong>特点：</strong></p><ul><li>支持基本的计算操作</li></ul><p><strong>语法：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;1+2&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">          <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;hello Vue&#x27;</span></span><br><span class="javascript">        &#125;</span><br><span class="javascript">      &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>页面显示为 hello Vue 和 3</p><h2><span id="22指令">2.2.指令</span></h2><p><strong>指令：</strong>就是标签的自定义属性，类似于 data-index ，用于操控Vue模板中的标签</p><p><strong>格式：</strong> 以 v- 开始</p><h3><span id="1v-cloak">1.V-cloak</span></h3><p>cloak 斗篷 掩盖</p><p><strong>作用：</strong>解决屏幕闪动问题。当网络较慢，网页还在加载 Vue.js ，而导致 Vue 来不及渲染，这时页面就会显示出 Vue 源代码。</p><p><strong>语法：</strong></p><p>css设置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[v-cloak]</span> &#123;<br>      <span class="hljs-attribute">display</span>: none;<br>    &#125;<br></code></pre></td></tr></table></figure><p>html设置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-cloak</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>js设置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>       <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>       <span class="hljs-attr">data</span>: &#123;<br>         <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;hello Vue&#x27;</span><br>       &#125;<br>     &#125;)<br></code></pre></td></tr></table></figure><h3><span id="2数据绑定的3种指令">2.数据绑定的3种指令</span></h3><ul><li><p>v-text</p><p>填充纯文本</p></li><li><p>v-html</p><p>填充html 片段</p></li><li><p>v-pre</p><p>填充源代码</p></li></ul><p><strong>语法：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;msg1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;msg1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-pre</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">     <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">       <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">       <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">         <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;hello Vue&#x27;</span>,</span><br><span class="javascript">         <span class="hljs-attr">msg1</span>: <span class="hljs-string">&#x27;&lt;h1&gt;HTML&lt;/h1&gt;&#x27;</span></span><br><span class="javascript">       &#125;</span><br><span class="javascript">     &#125;)</span><br><span class="javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3><span id="3v-model">3.v-model</span></h3><p><strong>双向数据绑定：</strong></p><p>一个页面元素的数据随着另一个页面元素的数据的变化而变化</p><p>双向数据绑定原理可搜索本博客相应论文</p><p><strong>用法：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;msg&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">          <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;Hello Vue&#x27;</span></span><br><span class="javascript">        &#125;</span><br><span class="javascript">      &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在这段代码内，div 中文本内容随着 input 的 value值得改变而改变。</p><h3><span id="4v-once">4.v-once</span></h3><p>显示内容之后不再具有数据响应式的特点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-once</span>&gt;</span>&#123;&#123;msg2&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;msg&quot;</span> /&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;msg2&quot;</span> /&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">     <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">       <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">       <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">         <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;绑定后的数据&#x27;</span>,</span><br><span class="javascript">         <span class="hljs-attr">msg2</span>: <span class="hljs-string">&#x27;不想具有响应式的数据&#x27;</span></span><br><span class="javascript">       &#125;</span><br><span class="javascript">     &#125;)</span><br><span class="javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3><span id="5v-on">5.v-on</span></h3><p>v-on表示事件的绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&#x27;num++&#x27;</span>&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以简写为 @</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;num++&#x27;</span>&gt;</span>点击1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;handle&#x27;</span>&gt;</span>点击2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;handle()&#x27;</span>&gt;</span>点击3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;handle&quot;</span>&gt;</span>按钮1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;num++&quot;</span>&gt;</span>按钮2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handle()&quot;</span>&gt;</span>按钮3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">     <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">       <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">       <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">         <span class="hljs-attr">num</span>: <span class="hljs-number">0</span></span><br><span class="javascript">       &#125;,</span><br><span class="javascript">       <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">         <span class="hljs-attr">handle</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">           <span class="hljs-built_in">this</span>.num++</span><br><span class="javascript">         &#125;</span><br><span class="javascript">       &#125;</span><br><span class="javascript">     &#125;)</span><br><span class="javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4><span id="51事件绑定的传参">5.1.事件绑定的传参</span></h4><ul><li>如果事件直接绑定函数名称，那么默认会传递事件对象作为事件函数的第一个参数</li><li>如果事件绑定函数调用，那么事件对象必须作为最后一个参数显示传递，并且事件对象的名称必须是$event</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handle1&quot;</span>&gt;</span>点击1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;handle2(123,$event,456,$event)&quot;</span>&gt;</span>点击2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">        <span class="hljs-attr">num</span>: <span class="hljs-number">0</span></span><br><span class="javascript">      &#125;,</span><br><span class="javascript">      <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">        <span class="hljs-attr">handle1</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a</span>) </span>&#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(a.target.innerHTML)</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-attr">handle2</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>) <span class="hljs-comment">// Arguments(4) [123, MouseEvent, 456, MouseEvent, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span></span><br><span class="javascript">        &#125;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;)</span><br><span class="javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4><span id="52事件修饰符">5.2.事件修饰符</span></h4><ul><li><p>.stop 阻止冒泡</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click.stop</span>=<span class="hljs-string">&#x27;handle1&#x27;</span>&gt;</span>点击1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>.prevent 阻止默认行为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click.prevent</span>=<span class="hljs-string">&quot;handle&quot;</span>&gt;</span>跳转<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4><span id="53按键修饰符">5.3.按键修饰符</span></h4><ul><li>.enter 回车键</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;input v-on:keyup.enter=<span class="hljs-string">&#x27;submit&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><ul><li>.esc 退出键</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;input v-on:keyup.delete=<span class="hljs-string">&#x27;handle&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><ul><li>自定义修饰符</li></ul><p>全局 config.keyCodes 对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">Vue.config.keyCodes.f1 = <span class="hljs-number">112</span><br><br>&lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-model=<span class="hljs-string">&quot;psw&quot;</span> v-on:keyup.f1=<span class="hljs-string">&quot;submit&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><h3><span id="6v-bind">6.v-bind</span></h3><p>属性动态绑定</p><p>可简写为 ：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">&#x27;url&#x27;</span>&gt;</span>跳转<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>// 缩写<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&#x27;url&#x27;</span>&gt;</span>跳转<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>url 为 data中的一个数据</p><p><strong>v-model的底层原理</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-bind:value</span>=<span class="hljs-string">&quot;msg&quot;</span> <span class="hljs-attr">v-on:input</span>=<span class="hljs-string">&quot;msg=$event.target.value&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h3><span id="7样式绑定">7.样式绑定</span></h3><h4><span id="71class样式处理">7.1.class样式处理</span></h4><h5><span id="对象语法">对象语法</span></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> &lt;div v-bind:<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;&#123;active: isActive,error: isError&#125;&quot;</span>&gt;<br>      测试样式<br>    &lt;/div&gt;<br><br><span class="hljs-comment">// data 中数据处理</span><br> data: &#123;<br>        <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">isError</span>: <span class="hljs-literal">true</span><br>      &#125;,<br></code></pre></td></tr></table></figure><h5><span id="数组语法">数组语法</span></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div v-bind:<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&#x27;[activeClass, errorClass]&#x27;</span>&gt;测试样式&lt;/div&gt;<br><br><span class="hljs-comment">// data 中数据处理</span><br> data: &#123;<br>       <span class="hljs-attr">activeClass</span>: <span class="hljs-string">&#x27;active&#x27;</span>,<br>       <span class="hljs-attr">errorClass</span>: <span class="hljs-string">&#x27;error&#x27;</span><br>     &#125;,<br></code></pre></td></tr></table></figure><p><font color="#ff0000"><strong>细节注意点：</strong></font></p><ol><li> 对象绑定和数组绑定可以结合使用</li><li> class绑定的值可以简化操作</li><li> 默认的class如何处理？默认的class会保留</li></ol><h5><span id="style绑定用法">style绑定用法</span></h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;test1&quot;</span>&gt;</span>测试1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">     <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">       <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">       <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">         <span class="hljs-attr">test1</span>: &#123;</span><br><span class="javascript">           <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;100px&#x27;</span>,</span><br><span class="javascript">           <span class="hljs-attr">height</span>: <span class="hljs-string">&#x27;200px&#x27;</span>,</span><br><span class="javascript">           <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&#x27;red&#x27;</span></span><br><span class="javascript">         &#125;</span><br><span class="javascript">       &#125;</span><br><span class="javascript">     &#125;)</span><br><span class="javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3><span id="8分支循环结构">8.分支循环结构</span></h3><h4><span id="81分支结构">8.1.分支结构</span></h4><ul><li>v-if</li><li>v-else</li><li>v-else-if</li></ul><p><font color="#ff0000">本质就是控制元素是否渲染到页面</font></p><ul><li>v-show</li></ul><p><font color="#ff0000">v-show控制元素是否显示（已经渲染到了页面）</font></p><h4><span id="82循环结构">8.2.循环结构</span></h4><h5><span id="v-for遍历数组">v-for遍历数组</span></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;li v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&#x27;item in fruits&#x27;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&#x27;(item, index) in fruits&#x27;</span>&gt;</span>&#123;&#123;item + &#x27;---&#x27; +index&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&#x27;item.id&#x27;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&#x27;(item, index) in myFruits&#x27;</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p> key的作用：通过id 帮助Vue区分不同的元素，从而提高性能 : 是 v-bind的简写</p><h5><span id="v-for遍历对象">v-for遍历对象</span></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> &lt;div v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&#x27;value==25&#x27;</span> v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&#x27;(value,key,index) in obj&#x27;</span>&gt;<br>            &#123;&#123;value+<span class="hljs-string">&#x27;---&#x27;</span> + key + <span class="hljs-string">&#x27;---&#x27;</span>+index&#125;&#125;<br> &lt;/div&gt;<br><span class="hljs-comment">// 与 v-if 配合着用 选择性循环</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(v, k, i) in team&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;i&quot;</span>&gt;</span>&#123;&#123;k + &#x27; : &#x27; + v&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">     <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">       <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">       <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">         <span class="hljs-attr">team</span>: &#123;</span><br><span class="javascript">           <span class="hljs-attr">pg</span>: <span class="hljs-string">&#x27;paul&#x27;</span>,</span><br><span class="javascript">           <span class="hljs-attr">sg</span>: <span class="hljs-string">&#x27;booker&#x27;</span>,</span><br><span class="javascript">           <span class="hljs-attr">sf</span>: <span class="hljs-string">&#x27;bridges&#x27;</span>,</span><br><span class="javascript">           <span class="hljs-attr">pf</span>: <span class="hljs-string">&#x27;crowder&#x27;</span>,</span><br><span class="javascript">           <span class="hljs-attr">c</span>: <span class="hljs-string">&#x27;aydon&#x27;</span></span><br><span class="javascript">         &#125;</span><br><span class="javascript">       &#125;</span><br><span class="javascript">     &#125;)</span><br><span class="javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo博客中插入图片</title>
    <link href="/2021/06/26/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/"/>
    <url>/2021/06/26/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<h1><span id="第一步安装插件">第一步：安装插件</span></h1><p>在hexo根目录打开Git Bash,执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">npm install hexo-asset-image --save<br></code></pre></td></tr></table></figure><h1><span id="第二步打开hexo的配置文件_configyml">第二步：打开hexo的配置文件_config.yml</span></h1><p>找到 post_asset_folder，把这个选项从false改成true</p><h1><span id="第三步修改模块代码">第三步：修改模块代码</span></h1><p>打开如下js文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">/node_modules/hexo-asset-image/index.js<br></code></pre></td></tr></table></figure><p>将内容更换为下面的代码<br> （在此感谢Ericam_ 大神：<a href="https://links.jianshu.com/go?to=https://blog.csdn.net/xjm850552586">https://blog.csdn.net/xjm850552586</a>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&#x27;use strict&#x27;</span>;<br>var cheerio = require(<span class="hljs-string">&#x27;cheerio&#x27;</span>);<br><br>// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string<br><span class="hljs-keyword">function</span> getPosition(str, m, i) &#123;<br>  <span class="hljs-built_in">return</span> str.split(m, i).join(m).length;<br>&#125;<br><br>var version = String(hexo.version).split(<span class="hljs-string">&#x27;.&#x27;</span>);<br>hexo.extend.filter.register(<span class="hljs-string">&#x27;after_post_render&#x27;</span>, <span class="hljs-keyword">function</span>(data)&#123;<br>  var config = hexo.config;<br>  <span class="hljs-keyword">if</span>(config.post_asset_folder)&#123;<br>        var link = data.permalink;<br>    <span class="hljs-keyword">if</span>(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)<br>       var beginPos = getPosition(link, <span class="hljs-string">&#x27;/&#x27;</span>, 1) + 1;<br>    <span class="hljs-keyword">else</span><br>       var beginPos = getPosition(link, <span class="hljs-string">&#x27;/&#x27;</span>, 3) + 1;<br>    // In hexo 3.1.1, the permalink of <span class="hljs-string">&quot;about&quot;</span> page is like <span class="hljs-string">&quot;.../about/index.html&quot;</span>.<br>    var endPos = link.lastIndexOf(<span class="hljs-string">&#x27;/&#x27;</span>) + 1;<br>    link = link.substring(beginPos, endPos);<br><br>    var toprocess = [<span class="hljs-string">&#x27;excerpt&#x27;</span>, <span class="hljs-string">&#x27;more&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>];<br>    <span class="hljs-keyword">for</span>(var i = 0; i &lt; toprocess.length; i++)&#123;<br>      var key = toprocess[i];<br> <br>      var $ = cheerio.load(data[key], &#123;<br>        ignoreWhitespace: <span class="hljs-literal">false</span>,<br>        xmlMode: <span class="hljs-literal">false</span>,<br>        lowerCaseTags: <span class="hljs-literal">false</span>,<br>        decodeEntities: <span class="hljs-literal">false</span><br>      &#125;);<br><br>      $(<span class="hljs-string">&#x27;img&#x27;</span>).each(<span class="hljs-function"><span class="hljs-title">function</span></span>()&#123;<br>        <span class="hljs-keyword">if</span> ($(this).attr(<span class="hljs-string">&#x27;src&#x27;</span>))&#123;<br>            // For windows style path, we replace <span class="hljs-string">&#x27;\&#x27;</span> to <span class="hljs-string">&#x27;/&#x27;</span>.<br>            var src = $(this).attr(<span class="hljs-string">&#x27;src&#x27;</span>).replace(<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>);<br>            <span class="hljs-keyword">if</span>(!/http[s]*.*|\/\/.*/.<span class="hljs-built_in">test</span>(src) &amp;&amp;<br>               !/^\s*\//.<span class="hljs-built_in">test</span>(src)) &#123;<br>              // For <span class="hljs-string">&quot;about&quot;</span> page, the first part of <span class="hljs-string">&quot;src&quot;</span> can<span class="hljs-string">&#x27;t be removed.</span><br><span class="hljs-string">              // In addition, to support multi-level local directory.</span><br><span class="hljs-string">              var linkArray = link.split(&#x27;</span>/<span class="hljs-string">&#x27;).filter(function(elem)&#123;</span><br><span class="hljs-string">                return elem != &#x27;</span><span class="hljs-string">&#x27;;</span><br><span class="hljs-string">              &#125;);</span><br><span class="hljs-string">              var srcArray = src.split(&#x27;</span>/<span class="hljs-string">&#x27;).filter(function(elem)&#123;</span><br><span class="hljs-string">                return elem != &#x27;</span><span class="hljs-string">&#x27; &amp;&amp; elem != &#x27;</span>.<span class="hljs-string">&#x27;;</span><br><span class="hljs-string">              &#125;);</span><br><span class="hljs-string">              if(srcArray.length &gt; 1)</span><br><span class="hljs-string">                srcArray.shift();</span><br><span class="hljs-string">              src = srcArray.join(&#x27;</span>/<span class="hljs-string">&#x27;);</span><br><span class="hljs-string">              $(this).attr(&#x27;</span>src<span class="hljs-string">&#x27;, config.root + link + src);</span><br><span class="hljs-string">              console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">        &#125;else&#123;</span><br><span class="hljs-string">            console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span><br><span class="hljs-string">            console.info&amp;&amp;console.info($(this));</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">      &#125;);</span><br><span class="hljs-string">      data[key] = $.html();</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">&#125;);</span><br></code></pre></td></tr></table></figure><h1><span id="第四步插入图片">第四步：插入图片</span></h1><p>比如我写好一个 md ，然后我采用 ctrl + f 查找 md文件 的文件名 替换为 .</p><p><img src="/2021/06/26/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/image-20210626211018298.png" alt="image-20210626211018298"></p><p><img src="/2021/06/26/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/liu.jpg" alt="liu"></p><p>然后在静态资源中就能正常显示图片了</p><h1><span id="另外">另外</span></h1><p>很多主题都有自己的方法插入图片的方法，比如我现在使用的fluid主题</p><p>参考链接：<a href="https://www.jianshu.com/p/f72aaad7b852">https://www.jianshu.com/p/f72aaad7b852</a></p>]]></content>
    
    
    <categories>
      
      <category>博客使用技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客插入图片</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
